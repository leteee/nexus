# Nexus Framework - Global Configuration
# =======================================================================
# Framework-wide defaults and plugin configurations.
#
# Configuration Hierarchy (4 layers, highest to lowest precedence):
#   1. CLI overrides (--config key=value)
#   2. Case OR Template config (mutual exclusion)
#   3. Global config (this file)
#   4. Plugin defaults (from PluginConfig classes)
# =======================================================================

framework:
  name: "nexus"
  version: "1.0.0"

  # Cases root directories (searched in priority order)
  cases_roots:
    - "cases"

  # Template root directories (searched in priority order)
  templates_roots:
    - "templates"

  # Python packages to import at startup
  # Convention: directory name = package name, parent added to sys.path
  #
  # Built-in plugins (version controlled):
  packages:
    - "src/nexus/contrib/basic"

  # For sideloading external packages:
  # Create config/local.yaml and add paths under framework.packages
  # Example: nexus_workspace/alpha (see config/local.yaml.example)

  # Logging
  logging:
    level: INFO  # DEBUG, INFO, WARNING, ERROR
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

  # Performance
  performance:
    default_cache_size: 100  # MB
    lazy_loading: true
    max_concurrent_plugins: 4

# Global Plugin Configuration
# Provides fallback defaults for all plugins when not specified elsewhere
# IMPORTANT: Configure plugin behavior in templates/cases for actual use
plugins:
  # Data Generation Plugins
  "Data Generator":
    num_rows: 1000        # Number of rows to generate
    random_seed: 42       # For reproducible results
    num_categories: 3     # Number of categories in categorical columns
    noise_level: 0.1      # Amount of noise to add (0.0 to 1.0)

  "Sample Data Generator":
    dataset_type: "customers"  # customers, sales, products, etc.
    size: "medium"            # small, medium, large

  # Data Validation Plugins
  "Data Validator":
    check_nulls: true           # Check for null values
    check_duplicates: true      # Check for duplicate rows
    check_types: true           # Check data types
    required_columns: []        # List of required columns

  # Data Filter Plugin
  "Data Filter":
    column: "value"             # Column to filter on
    operator: ">"               # >, <, >=, <=, ==, !=
    threshold: 0.0              # Threshold value
    remove_nulls: true          # Remove null values before filtering

  # Data Aggregator Plugin
  "Data Aggregator":
    group_by: "category"        # Column to group by
    agg_column: "value"         # Column to aggregate
    agg_function: "mean"        # mean, sum, count, min, max, std

# ========================================================================
# Configuration Best Practices
# ========================================================================
#
# 1. Plugin I/O Configuration:
#    - All I/O paths are declared in plugin config classes with DataSource/DataSink annotations
#    - Users override I/O paths in YAML config alongside behavior parameters
#    - No separate data_sources or outputs sections needed in most cases
#
#    Example plugin config:
#      class MyPluginConfig(PluginConfig):
#          input_data: Annotated[str, DataSource(handler="csv")] = "data/input.csv"
#          output_data: Annotated[str, DataSink(handler="csv")] = "data/output.csv"
#          threshold: float = 0.5
#
#    Example YAML usage:
#      pipeline:
#        - plugin: "My Plugin"
#          config:
#            input_data: "custom/path/input.csv"   # Override I/O path
#            output_data: "custom/path/output.csv" # Override I/O path
#            threshold: 0.8                        # Override behavior param
#
# 2. Global data_sources (Optional):
#    - Only use for shared external data sources accessed by multiple plugins
#    - Reference with special syntax: "source:name"
#    - Most pipelines don't need this
#
#    Example (advanced use case):
#      data_sources:
#        customer_master:
#          handler: csv
#          path: "/shared/customers.csv"
#          read_only: true
#
#      pipeline:
#        - plugin: "Enricher"
#          config:
#            customer_data: "source:customer_master"  # Reference global source
#            output_data: "data/enriched.csv"
#
# 3. Configuration Hierarchy (4 layers):
#    CLI overrides > Case/Template config > Global config > Plugin defaults
#
#    Note: Case and Template are mutually exclusive (not merged):
#    - With --template: Use template, ignore case.yaml
#    - Without --template: Use case.yaml
#
# 4. Where to configure plugins:
#    - Global config (plugins.*): Organization-wide defaults only
#    - Templates: Reusable pipeline patterns (RECOMMENDED)
#    - Case configs: Case-specific customizations
#    - CLI: Quick experimentation and overrides
#
# 5. Configuration Namespaces:
#    - framework.*: Framework settings (logging, performance, discovery)
#    - data_sources.*: Global/shared data sources (optional, for cross-pipeline use)
#    - plugins.*: Plugin behavior defaults
#    - pipeline: Pipeline definition (in templates/cases only)
#    - meta: Metadata (name, description, in templates/cases only)
# ========================================================================


